const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Kon≈°tanty pre projekt
const PROJECT_START = new Date('2025-01-01');
const PROJECT_END = new Date('2026-12-31');

// Funkcia pre generovanie term√≠nov podƒæa periodicity
function generateDueDates(recurrence, startDate, endDate) {
  const dates = [];
  const start = startDate || PROJECT_START;
  const end = endDate || PROJECT_END;

  switch (recurrence) {
    case 'DVAKRAT_MESACNE':
      // 2x mesaƒçne - 1. a 15. de≈à ka≈æd√©ho mesiaca
      for (let date = new Date(start); date <= end; date.setMonth(date.getMonth() + 1)) {
        // 1. de≈à mesiaca
        const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
        if (firstDay >= start && firstDay <= end) {
          dates.push(new Date(firstDay));
        }
        
        // 15. de≈à mesiaca
        const fifteenthDay = new Date(date.getFullYear(), date.getMonth(), 15);
        if (fifteenthDay >= start && fifteenthDay <= end) {
          dates.push(new Date(fifteenthDay));
        }
      }
      break;

    case 'KVARTALNE':
      // 1x kvart√°lne - 1. de≈à ka≈æd√©ho ≈°tvr≈•roka (janu√°r, apr√≠l, j√∫l, okt√≥ber)
      for (let year = start.getFullYear(); year <= end.getFullYear(); year++) {
        const quarters = [0, 3, 6, 9]; // janu√°r, apr√≠l, j√∫l, okt√≥ber
        for (const month of quarters) {
          const quarterDate = new Date(year, month, 1);
          if (quarterDate >= start && quarterDate <= end) {
            dates.push(new Date(quarterDate));
          }
        }
      }
      break;

    case 'PRIEBEZNE':
      // Priebe≈æne - mesaƒçn√© kontroln√© body (1. de≈à mesiaca)
      for (let date = new Date(start); date <= end; date.setMonth(date.getMonth() + 1)) {
        const monthlyDate = new Date(date.getFullYear(), date.getMonth(), 1);
        if (monthlyDate >= start && monthlyDate <= end) {
          dates.push(new Date(monthlyDate));
        }
      }
      break;

    case 'JEDNORAZOVO':
      // Jednorazovo - jeden term√≠n na zaƒçiatku alebo podƒæa ≈°pecifik√°cie
      if (start <= end) {
        dates.push(new Date(start));
      }
      break;

    case 'PODLA_POTREBY':
      // Podƒæa potreby - ≈°tvr≈•roƒçn√© pripomienky
      for (let year = start.getFullYear(); year <= end.getFullYear(); year++) {
        const quarters = [0, 3, 6, 9]; // janu√°r, apr√≠l, j√∫l, okt√≥ber
        for (const month of quarters) {
          const quarterDate = new Date(year, month, 1);
          if (quarterDate >= start && quarterDate <= end) {
            dates.push(new Date(quarterDate));
          }
        }
      }
      break;

    case 'PERIODICKY':
      // Periodicky - mesaƒçn√© kontroln√© body
      for (let date = new Date(start); date <= end; date.setMonth(date.getMonth() + 1)) {
        const monthlyDate = new Date(date.getFullYear(), date.getMonth(), 1);
        if (monthlyDate >= start && monthlyDate <= end) {
          dates.push(new Date(monthlyDate));
        }
      }
      break;

    case 'POCAS_STAVBY':
      // Poƒças stavebn√Ωch pr√°c - mesaƒçn√© kontroly poƒças cel√©ho projektu
      for (let date = new Date(start); date <= end; date.setMonth(date.getMonth() + 1)) {
        const monthlyDate = new Date(date.getFullYear(), date.getMonth(), 1);
        if (monthlyDate >= start && monthlyDate <= end) {
          dates.push(new Date(monthlyDate));
        }
      }
      break;

    case 'PO_UKONCENI':
      // Po ukonƒçen√≠ pr√°c - term√≠n na konci projektu
      dates.push(new Date(end));
      break;

    default:
      // Pre nezn√°me typy periodicity - ≈°tvr≈•roƒçn√© kontroly
      for (let year = start.getFullYear(); year <= end.getFullYear(); year++) {
        const quarters = [0, 3, 6, 9];
        for (const month of quarters) {
          const quarterDate = new Date(year, month, 1);
          if (quarterDate >= start && quarterDate <= end) {
            dates.push(new Date(quarterDate));
          }
        }
      }
      break;
  }

  return dates.sort((a, b) => a - b);
}

// Funkcia pre generovanie n√°zvu pod√∫lohy
function generateSubtaskTitle(taskTitle, dueDate, index, totalCount) {
  const dateStr = dueDate.toLocaleDateString('sk-SK', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  });

  if (totalCount === 1) {
    return `${taskTitle} (${dateStr})`;
  } else {
    return `${taskTitle} - ${index + 1}/${totalCount} (${dateStr})`;
  }
}

// Funkcia pre generovanie popisu pod√∫lohy
function generateSubtaskDescription(task, dueDate, index, totalCount) {
  const dateStr = dueDate.toLocaleDateString('sk-SK', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  let description = `Realiz√°cia √∫lohy "${task.title}" na term√≠n ${dateStr}.\n\n`;
  
  if (task.description) {
    description += `Popis √∫lohy: ${task.description}\n\n`;
  }

  if (task.expectedResult) {
    description += `Oƒçak√°van√Ω v√Ωsledok: ${task.expectedResult}\n\n`;
  }

  if (task.responsiblePerson) {
    description += `Zodpovedn√° osoba: ${task.responsiblePerson}\n\n`;
  }

  description += `Periodicita: ${task.recurrence}\n`;
  description += `Priorita: ${task.priority}\n`;

  if (totalCount > 1) {
    description += `Poradie: ${index + 1} z ${totalCount} pl√°novan√Ωch realiz√°ci√≠`;
  }

  return description;
}

// Hlavn√° funkcia pre generovanie pod√∫loh
async function generateSubtasksForTask(task) {
  try {
    console.log(`üîÑ Generujem pod√∫lohy pre: ${task.taskNumber} - ${task.title}`);

    // Vymazanie existuj√∫cich pod√∫loh pre t√∫to √∫lohu
    await prisma.projectSubtask.deleteMany({
      where: { projectTaskId: task.id }
    });

    // Generovanie term√≠nov podƒæa periodicity
    const dueDates = generateDueDates(task.recurrence, task.startDate, task.endDate);

    if (dueDates.length === 0) {
      console.log(`‚ö†Ô∏è ≈Ωiadne term√≠ny pre √∫lohu ${task.taskNumber}`);
      return 0;
    }

    console.log(`üìÖ Generujem ${dueDates.length} pod√∫loh pre periodicitu ${task.recurrence}`);

    // Vytvorenie pod√∫loh
    let createdCount = 0;
    for (let i = 0; i < dueDates.length; i++) {
      const dueDate = dueDates[i];
      const title = generateSubtaskTitle(task.title, dueDate, i, dueDates.length);
      const description = generateSubtaskDescription(task, dueDate, i, dueDates.length);

      await prisma.projectSubtask.create({
        data: {
          projectTaskId: task.id,
          title,
          description,
          dueDate,
          status: 'PENDING',
          notes: `Automaticky generovan√© pre periodicitu: ${task.recurrence}`
        }
      });

      createdCount++;
    }

    console.log(`‚úÖ Vytvoren√Ωch ${createdCount} pod√∫loh pre √∫lohu ${task.taskNumber}`);
    return createdCount;

  } catch (error) {
    console.error(`‚ùå Chyba pri generovan√≠ pod√∫loh pre √∫lohu ${task.taskNumber}:`, error);
    return 0;
  }
}

// Hlavn√° funkcia pre generovanie v≈°etk√Ωch pod√∫loh
async function generateAllSubtasks() {
  try {
    console.log('üöÄ Zaƒç√≠nam generovanie pod√∫loh pre v≈°etky projektov√© √∫lohy...');
    console.log(`üìÖ Obdobie projektu: ${PROJECT_START.toLocaleDateString('sk-SK')} - ${PROJECT_END.toLocaleDateString('sk-SK')}`);

    // Z√≠skanie v≈°etk√Ωch projektov√Ωch √∫loh
    const tasks = await prisma.projectTask.findMany({
      orderBy: { taskNumber: 'asc' }
    });

    console.log(`üìã Naƒç√≠tan√Ωch ${tasks.length} projektov√Ωch √∫loh`);

    let totalSubtasks = 0;
    let processedTasks = 0;

    for (const task of tasks) {
      const subtaskCount = await generateSubtasksForTask(task);
      totalSubtasks += subtaskCount;
      processedTasks++;

      // Progress update ka≈æd√Ωch 10 √∫loh
      if (processedTasks % 10 === 0) {
        console.log(`üìä Spracovan√Ωch ${processedTasks}/${tasks.length} √∫loh...`);
      }
    }

    console.log(`\nüéâ GENEROVANIE POD√öLOH DOKONƒåEN√â!`);
    console.log(`üìä S√∫hrn:`);
    console.log(`   üìã Spracovan√Ωch √∫loh: ${processedTasks}`);
    console.log(`   üìÖ Vytvoren√Ωch pod√∫loh: ${totalSubtasks}`);
    console.log(`   üìà Priemer pod√∫loh na √∫lohu: ${(totalSubtasks / processedTasks).toFixed(1)}`);

    // ≈†tatistiky podƒæa periodicity
    const statsByRecurrence = await prisma.projectTask.groupBy({
      by: ['recurrence'],
      _count: {
        id: true
      },
      orderBy: {
        _count: {
          id: 'desc'
        }
      }
    });

    console.log(`\nüìä √ölohy podƒæa periodicity:`);
    for (const stat of statsByRecurrence) {
      const subtaskCount = await prisma.projectSubtask.count({
        where: {
          projectTask: {
            recurrence: stat.recurrence
          }
        }
      });
      console.log(`   ${stat.recurrence}: ${stat._count.id} √∫loh ‚Üí ${subtaskCount} pod√∫loh`);
    }

    // ≈†tatistiky podƒæa mesiacov
    const subtasksByMonth = await prisma.projectSubtask.groupBy({
      by: ['dueDate'],
      _count: {
        id: true
      },
      orderBy: {
        dueDate: 'asc'
      }
    });

    const monthlyStats = {};
    subtasksByMonth.forEach(item => {
      const month = item.dueDate.toISOString().substring(0, 7); // YYYY-MM
      monthlyStats[month] = (monthlyStats[month] || 0) + item._count.id;
    });

    console.log(`\nüìÖ Rozlo≈æenie pod√∫loh podƒæa mesiacov:`);
    Object.entries(monthlyStats).forEach(([month, count]) => {
      console.log(`   ${month}: ${count} pod√∫loh`);
    });

  } catch (error) {
    console.error('‚ùå Chyba pri generovan√≠ pod√∫loh:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Spustenie generovania
if (require.main === module) {
  generateAllSubtasks()
    .then(() => {
      console.log('‚úÖ Generovanie pod√∫loh dokonƒçen√©!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Generovanie pod√∫loh zlyhalo:', error);
      process.exit(1);
    });
}

module.exports = { generateAllSubtasks, generateSubtasksForTask };

