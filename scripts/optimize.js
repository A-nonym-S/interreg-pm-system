/**
 * Optimalizaƒçn√Ω skript pre INTERREG HUSKROUA Project Management System
 * 
 * Tento skript vykon√°va nasleduj√∫ce optimaliz√°cie:
 * 1. Anal√Ωza veƒækosti bal√≠ƒçkov
 * 2. Optimaliz√°cia obr√°zkov
 * 3. Kontrola v√Ωkonu komponentov
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Konfigur√°cia
const config = {
  srcDir: path.join(__dirname, '../src'),
  publicDir: path.join(__dirname, '../public'),
  componentsDir: path.join(__dirname, '../src/components'),
  outputFile: path.join(__dirname, '../optimization-report.md')
};

// Hlavn√° funkcia
async function main() {
  console.log('üöÄ Sp√∫≈°≈•am optimaliz√°ciu INTERREG HUSKROUA Project Management System...');
  
  // Vytvorenie reportu
  let report = `# Optimalizaƒçn√Ω report - INTERREG HUSKROUA Project Management System\n\n`;
  report += `D√°tum: ${new Date().toLocaleString()}\n\n`;
  
  // 1. Anal√Ωza veƒækosti bal√≠ƒçkov
  console.log('üì¶ Analyzujem veƒækos≈• bal√≠ƒçkov...');
  report += `## Anal√Ωza veƒækosti bal√≠ƒçkov\n\n`;
  
  try {
    // Spustenie next build s anal√Ωzou
    execSync('npx next build --analyze', { stdio: 'inherit' });
    report += `‚úÖ Build anal√Ωza bola √∫spe≈°ne dokonƒçen√°. Skontrolujte .next/analyze v√Ωstup.\n\n`;
  } catch (error) {
    report += `‚ùå Chyba pri anal√Ωze buildu: ${error.message}\n\n`;
  }
  
  // 2. Kontrola v√Ωkonu komponentov
  console.log('üîç Kontrolujem v√Ωkon komponentov...');
  report += `## Kontrola v√Ωkonu komponentov\n\n`;
  
  const componentStats = analyzeComponents(config.componentsDir);
  report += `Celkov√Ω poƒçet komponentov: ${componentStats.total}\n`;
  report += `Poƒçet client komponentov: ${componentStats.clientComponents}\n`;
  report += `Poƒçet server komponentov: ${componentStats.serverComponents}\n\n`;
  
  if (componentStats.largeComponents.length > 0) {
    report += `### Veƒæk√© komponenty (viac ako 100 riadkov)\n\n`;
    componentStats.largeComponents.forEach(comp => {
      report += `- ${comp.name}: ${comp.lines} riadkov\n`;
    });
    report += `\n`;
  }
  
  // 3. Odpor√∫ƒçania pre optimaliz√°ciu
  console.log('üí° Generujem odpor√∫ƒçania pre optimaliz√°ciu...');
  report += `## Odpor√∫ƒçania pre optimaliz√°ciu\n\n`;
  
  report += `1. **Lazy loading komponentov**: Implementujte lazy loading pre komponenty, ktor√© nie s√∫ potrebn√© pri prvom naƒç√≠tan√≠.\n`;
  report += `2. **Optimaliz√°cia obr√°zkov**: Pou≈æ√≠vajte Next.js Image komponent pre automatick√∫ optimaliz√°ciu obr√°zkov.\n`;
  report += `3. **Memoiz√°cia komponentov**: Pou≈æ√≠vajte React.memo pre komponenty, ktor√© sa ƒçasto prerenderuj√∫.\n`;
  report += `4. **Redukcia JavaScript bundle size**: Minimalizujte pou≈æ√≠vanie veƒæk√Ωch kni≈æn√≠c a implementujte code splitting.\n`;
  report += `5. **Optimaliz√°cia CSS**: Odstr√°≈àte nepou≈æ√≠van√© CSS pomocou PurgeCSS.\n\n`;
  
  // Ulo≈æenie reportu
  fs.writeFileSync(config.outputFile, report);
  console.log(`‚úÖ Optimalizaƒçn√Ω report bol ulo≈æen√Ω do: ${config.outputFile}`);
}

// Anal√Ωza komponentov
function analyzeComponents(dir) {
  const stats = {
    total: 0,
    clientComponents: 0,
    serverComponents: 0,
    largeComponents: []
  };
  
  function processDir(currentDir) {
    const files = fs.readdirSync(currentDir);
    
    files.forEach(file => {
      const filePath = path.join(currentDir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        processDir(filePath);
      } else if (file.endsWith('.tsx') || file.endsWith('.jsx')) {
        stats.total++;
        
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n').length;
        
        if (content.includes('"use client"') || content.includes("'use client'")) {
          stats.clientComponents++;
        } else {
          stats.serverComponents++;
        }
        
        if (lines > 100) {
          stats.largeComponents.push({
            name: path.relative(dir, filePath),
            lines
          });
        }
      }
    });
  }
  
  try {
    processDir(dir);
  } catch (error) {
    console.error(`Chyba pri anal√Ωze komponentov: ${error.message}`);
  }
  
  return stats;
}

// Spustenie hlavnej funkcie
main().catch(error => {
  console.error('‚ùå Chyba pri optimaliz√°cii:', error);
  process.exit(1);
});

