const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

// Mapovanie priority
function mapPriorityToEnum(priority) {
  const priorityMap = {
    'Vysok√°': 'VYSOKA',
    'Stredn√°': 'STREDNA',
    'N√≠zka': 'NIZKA'
  };
  return priorityMap[priority] || 'STREDNA';
}

// Mapovanie periodicity
function mapRecurrenceToEnum(recurrence) {
  const recurrenceMap = {
    'Priebe≈æne': 'PRIEBEZNE',
    'Priebe≈æne (aktualiz√°cia)': 'PRIEBEZNE',
    '2x mesaƒçne': 'DVAKRAT_MESACNE',
    '1x kvart√°lne': 'KVARTALNE',
    'Jednorazovo': 'JEDNORAZOVO',
    'Jednorazovo (nastavenie) + Priebe≈æne': 'PRIEBEZNE',
    'Podƒæa potreby': 'PODLA_POTREBY',
    'Periodicky (podƒæa harmonogramu)': 'PERIODICKY',
    'Poƒças stavebn√Ωch pr√°c': 'POCAS_STAVBY',
    'Po ukonƒçen√≠ pr√°c': 'PO_UKONCENI'
  };
  return recurrenceMap[recurrence] || 'PODLA_POTREBY';
}

// Parsovanie CSV
function parseCSV(content) {
  const lines = content.split('\n');
  const headers = lines[0].split(';');
  const rows = [];

  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;

    const values = line.split(';');
    const row = {};

    headers.forEach((header, index) => {
      row[header.trim()] = values[index]?.trim() || '';
    });

    rows.push(row);
  }

  return rows;
}

// Parsovanie d√°tumu
function parseDate(dateStr) {
  if (!dateStr || dateStr === 'N/A') return null;
  
  const formats = [
    /^(\d{4})-(\d{2})-(\d{2})$/, // YYYY-MM-DD
    /^(\d{2})\.(\d{2})\.(\d{4})$/, // DD.MM.YYYY
    /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/ // D.M.YYYY
  ];

  for (const format of formats) {
    const match = dateStr.match(format);
    if (match) {
      if (format === formats[0]) {
        return new Date(parseInt(match[1]), parseInt(match[2]) - 1, parseInt(match[3]));
      } else {
        return new Date(parseInt(match[3]), parseInt(match[2]) - 1, parseInt(match[1]));
      }
    }
  }

  return null;
}

// Import dokumentov
async function importDocuments() {
  console.log('üöÄ Zaƒç√≠nam import dokumentov...');

  const csvPath = path.join(__dirname, '..', '..', 'upload', 'Prehlad_dokumentov.csv');
  
  if (!fs.existsSync(csvPath)) {
    throw new Error(`CSV s√∫bor nebol n√°jden√Ω: ${csvPath}`);
  }

  const csvContent = fs.readFileSync(csvPath, 'utf-8');
  const documentRows = parseCSV(csvContent);

  console.log(`üìÑ Naƒç√≠tan√Ωch ${documentRows.length} dokumentov z CSV`);

  await prisma.projectDocument.deleteMany();
  console.log('üóëÔ∏è Vymazan√© existuj√∫ce dokumenty');

  let importedCount = 0;
  let skippedCount = 0;

  for (const row of documentRows) {
    try {
      const internalNumber = parseInt(row['Intern√© P.ƒç.']);
      
      if (isNaN(internalNumber)) {
        console.log(`‚ö†Ô∏è Preskakujem riadok s neplatn√Ωm intern√Ωm ƒç√≠slom: ${row['Intern√© P.ƒç.']}`);
        skippedCount++;
        continue;
      }

      const isDirectSource = row['Priamy zdroj pre √∫lohu v Projektove_ulohy.csv?'] === '√ÅNO';

      const document = await prisma.projectDocument.create({
        data: {
          internalNumber,
          originalName: row['N√°zov dokumentu (origin√°lny)'],
          taskType: row['Typ √∫lohy (hlavn√° kateg√≥ria)'],
          isDirectSource,
          notes: row['Pozn√°mky (Duplicita/Kontext)'] || null,
          filePath: null
        }
      });

      console.log(`‚úÖ Importovan√Ω dokument: ${document.internalNumber} - ${document.originalName}`);
      importedCount++;

    } catch (error) {
      console.error(`‚ùå Chyba pri importe dokumentu ${row['Intern√© P.ƒç.']}:`, error);
      skippedCount++;
    }
  }

  console.log(`\nüìä S√∫hrn importu dokumentov:`);
  console.log(`   ‚úÖ √öspe≈°ne importovan√©: ${importedCount}`);
  console.log(`   ‚ö†Ô∏è Preskoƒçen√©: ${skippedCount}`);

  return { importedCount, skippedCount };
}

// Hƒæadanie dokumentu podƒæa zdroja
async function findDocumentBySource(source) {
  try {
    const documentNameMatch = source.match(/^([^(]+)/);
    if (!documentNameMatch) return null;

    const documentName = documentNameMatch[1].trim();
    
    const document = await prisma.projectDocument.findFirst({
      where: {
        originalName: {
          contains: documentName,
          mode: 'insensitive'
        }
      }
    });

    return document?.id || null;
  } catch (error) {
    console.warn(`Nepodarilo sa n√°js≈• dokument pre zdroj: ${source}`);
    return null;
  }
}

// Z√≠skanie parent task number
function getParentTaskNumber(taskNumber) {
  const parts = taskNumber.split('.');
  if (parts.length <= 1) return null;
  
  return parts.slice(0, -1).join('.');
}

// Import projektov√Ωch √∫loh
async function importProjectTasks() {
  console.log('üöÄ Zaƒç√≠nam import projektov√Ωch √∫loh...');

  const csvPath = path.join(__dirname, '..', '..', 'upload', 'Projektove_ulohy.csv');
  
  if (!fs.existsSync(csvPath)) {
    throw new Error(`CSV s√∫bor nebol n√°jden√Ω: ${csvPath}`);
  }

  const csvContent = fs.readFileSync(csvPath, 'utf-8');
  const taskRows = parseCSV(csvContent);

  console.log(`üìã Naƒç√≠tan√Ωch ${taskRows.length} √∫loh z CSV`);

  await prisma.projectSubtask.deleteMany();
  await prisma.projectTask.deleteMany();
  console.log('üóëÔ∏è Vymazan√© existuj√∫ce projektov√© √∫lohy');

  let importedCount = 0;
  let skippedCount = 0;
  const taskMap = new Map();

  // Prv√Ω prechod - vytvorenie v≈°etk√Ωch √∫loh
  for (const row of taskRows) {
    try {
      const taskNumber = row['P.ƒç.'];
      
      if (!taskNumber) {
        console.log(`‚ö†Ô∏è Preskakujem riadok bez ƒç√≠sla √∫lohy`);
        skippedCount++;
        continue;
      }

      const startDate = parseDate(row['Zaƒçiatok']);
      const endDate = parseDate(row['Ukonƒçenie']);
      const fulfillsKC = row['Pln√≠ KC?'] === '√ÅNO';
      const priority = mapPriorityToEnum(row['Priorita']);
      const recurrence = mapRecurrenceToEnum(row['Opakovanie']);

      const documentId = await findDocumentBySource(row['Zdroj (dokument, strana)']);

      const task = await prisma.projectTask.create({
        data: {
          taskNumber,
          taskType: row['Typ √∫lohy'],
          title: row['N√°zov √∫lohy'],
          description: row['Detailn√Ω popis'],
          source: row['Zdroj (dokument, strana)'],
          priority,
          recurrence,
          startDate,
          endDate,
          duration: row['Trvanie'] || null,
          responsiblePerson: row['Zodpovedn√° osoba'] || null,
          expectedResult: row['Oƒçak√°van√Ω v√Ωsledok'] || null,
          fulfillsKC,
          notes: row['Pozn√°mky'] || null,
          documentId
        }
      });

      taskMap.set(taskNumber, task.id);
      console.log(`‚úÖ Vytvoren√° √∫loha: ${taskNumber} - ${task.title}`);
      importedCount++;

    } catch (error) {
      console.error(`‚ùå Chyba pri vytv√°ran√≠ √∫lohy ${row['P.ƒç.']}:`, error);
      skippedCount++;
    }
  }

  // Druh√Ω prechod - nastavenie parent referenci√≠
  console.log('\nüîó Nastavujem hierarchick√© vz≈•ahy...');
  let hierarchyCount = 0;

  for (const row of taskRows) {
    try {
      const taskNumber = row['P.ƒç.'];
      const parentTaskNumber = getParentTaskNumber(taskNumber);
      
      if (parentTaskNumber && taskMap.has(parentTaskNumber) && taskMap.has(taskNumber)) {
        const taskId = taskMap.get(taskNumber);
        const parentId = taskMap.get(parentTaskNumber);

        await prisma.projectTask.update({
          where: { id: taskId },
          data: { parentId }
        });

        console.log(`üîó Nastaven√Ω parent: ${taskNumber} -> ${parentTaskNumber}`);
        hierarchyCount++;
      }
    } catch (error) {
      console.error(`‚ùå Chyba pri nastavovan√≠ hierarchie pre ${row['P.ƒç.']}:`, error);
    }
  }

  console.log(`\nüìä S√∫hrn importu projektov√Ωch √∫loh:`);
  console.log(`   ‚úÖ √öspe≈°ne importovan√©: ${importedCount}`);
  console.log(`   üîó Hierarchick√© vz≈•ahy: ${hierarchyCount}`);
  console.log(`   ‚ö†Ô∏è Preskoƒçen√©: ${skippedCount}`);

  return { importedCount, skippedCount, hierarchyCount };
}

// Hlavn√° funkcia
async function importAllData() {
  console.log('üöÄ Zaƒç√≠nam kompletn√Ω import projektov√Ωch d√°t...\n');
  
  try {
    // 1. Import dokumentov
    console.log('üìÑ F√ÅZA 1: Import dokumentov');
    console.log('='.repeat(50));
    const documentsResult = await importDocuments();
    console.log('\n‚úÖ F√°za 1 dokonƒçen√°\n');

    // 2. Import projektov√Ωch √∫loh
    console.log('üìã F√ÅZA 2: Import projektov√Ωch √∫loh');
    console.log('='.repeat(50));
    const tasksResult = await importProjectTasks();
    console.log('\n‚úÖ F√°za 2 dokonƒçen√°\n');

    console.log('üéâ KOMPLETN√ù IMPORT √öSPE≈†NE DOKONƒåEN√ù!');
    console.log('='.repeat(50));
    console.log(`üìÑ Dokumenty: ${documentsResult.importedCount} importovan√Ωch`);
    console.log(`üìã √ölohy: ${tasksResult.importedCount} importovan√Ωch`);
    console.log(`üîó Hierarchie: ${tasksResult.hierarchyCount} nastaven√Ωch`);

  } catch (error) {
    console.error('\nüí• CHYBA PRI IMPORTE:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Spustenie
if (require.main === module) {
  importAllData()
    .then(() => {
      console.log('‚úÖ Import dokonƒçen√Ω!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Import zlyhal:', error);
      process.exit(1);
    });
}

