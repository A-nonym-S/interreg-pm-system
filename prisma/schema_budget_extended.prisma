// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  role          String    @default("TEAM_MEMBER") // ADMIN, PROJECT_MANAGER, TEAM_MEMBER, STAKEHOLDER, GUEST
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  assignedTasks      Task[]
  activities         Activity[]
  complianceChecks   ComplianceCheck[]
  documents          Document[]
  expenseApprovals   ExpenseApproval[]
}

// Task model
model Task {
  id          String    @id @default(uuid())
  externalId  String    @unique // e.g., TASK-2024-07-0001
  title       String
  description String?
  status      String    @default("TODO") // TODO, IN_PROGRESS, DONE, BLOCKED, PENDING, COMPLETED, CANCELLED
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT, CRITICAL
  category    String    // GENERAL, REPORTING, FINANCIAL, PROCUREMENT, COMPLIANCE, PUBLICITY, PARTNERSHIP, MONITORING
  progress    Int       @default(0)
  deadline    DateTime?
  assigneeId  String?
  budgetItemId String?   // Prepojenie s rozpočtovou položkou
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  assignee    User?       @relation(fields: [assigneeId], references: [id])
  budgetItem  BudgetItem? @relation(fields: [budgetItemId], references: [id])
  activities  Activity[]
}

// Activity model
model Activity {
  id          String    @id @default(uuid())
  type        ActivityType    // TASK_CREATED, TASK_UPDATED, TASK_COMPLETED, TASK_ASSIGNED, COMMENT_ADDED, DOCUMENT_UPLOADED, COMPLIANCE_CHECK, STATUS_CHANGED, BUDGET_CREATED, BUDGET_IMPORTED, EXPENSE_ADDED, EXPENSE_APPROVED, EXPENSE_REJECTED
  description String
  userId      String
  taskId      String?
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  task        Task?     @relation(fields: [taskId], references: [id])
}

// Compliance Check model
model ComplianceCheck {
  id          String    @id @default(uuid())
  title       String
  description String?
  type        String    // VISUAL_IDENTITY, SANCTIONS_LIST, GDPR, PROCUREMENT, FINANCIAL, REPORTING
  status      String    @default("PENDING") // COMPLIANT, NON_COMPLIANT, PENDING
  dueDate     DateTime?
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  assignee    User?     @relation(fields: [assigneeId], references: [id])
}

// Document model
model Document {
  id          String    @id @default(uuid())
  title       String
  description String?
  type        String    // REPORT, FINANCIAL, CONTRACT, PRESENTATION, OTHER
  url         String
  uploaderId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  uploader    User      @relation(fields: [uploaderId], references: [id])
}

// Project Document model - for documents from CSV
model ProjectDocument {
  id              String    @id @default(uuid())
  internalNumber  Int       @unique // Interné P.č.
  originalName    String    // Názov dokumentu (originálny)
  taskType        String    // Typ úlohy (hlavná kategória)
  isDirectSource  Boolean   @default(false) // Priamy zdroj pre úlohu v Projektove_ulohy.csv?
  notes           String?   // Poznámky (Duplicita/Kontext)
  filePath        String?   // Cesta k súboru
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  projectTasks    ProjectTask[]
}

// Project Task model - for tasks from CSV with hierarchical structure
model ProjectTask {
  id                    String    @id @default(uuid())
  taskNumber            String    @unique // P.č. (napr. "1", "1.1", "1.1.1")
  parentId              String?   // Pre hierarchickú štruktúru
  parent                ProjectTask? @relation("TaskHierarchy", fields: [parentId], references: [id])
  children              ProjectTask[] @relation("TaskHierarchy")
  
  taskType              String    // Typ úlohy
  title                 String    // Názov úlohy
  description           String    @db.Text // Detailný popis
  source                String    // Zdroj (dokument, strana)
  priority              TaskPriority // Priorita (enum)
  recurrence            TaskRecurrence // Opakovanie (enum)
  startDate             DateTime? // Začiatok
  endDate               DateTime? // Ukončenie
  duration              String?   // Trvanie
  responsiblePerson     String?   // Zodpovedná osoba
  expectedResult        String?   @db.Text // Očakávaný výsledok
  fulfillsKC            Boolean   @default(false) // Plní KC?
  notes                 String?   @db.Text // Poznámky
  
  // Relations
  documentId            String?
  document              ProjectDocument? @relation(fields: [documentId], references: [id])
  subtasks              ProjectSubtask[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([taskNumber])
  @@index([taskType])
  @@index([recurrence])
}

// Project Subtask model - for automatically generated subtasks with due dates
model ProjectSubtask {
  id                String    @id @default(uuid())
  projectTaskId     String
  projectTask       ProjectTask @relation(fields: [projectTaskId], references: [id], onDelete: Cascade)
  
  title             String    // Názov podúlohy
  description       String?   @db.Text // Popis podúlohy
  dueDate           DateTime  // Termín realizácie
  status            SubtaskStatus @default(PENDING) // Stav podúlohy
  notes             String?   @db.Text // Poznámky
  completedAt       DateTime? // Dátum dokončenia
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([projectTaskId, dueDate])
  @@index([status])
  @@index([dueDate])
}

// ===== ROZPOČTOVÝ MODUL =====

// Budget model - hlavný rozpočet projektu
model Budget {
  id                String           @id @default(cuid())
  projectName       String
  totalAmount       Decimal          @db.Decimal(15,2)
  startDate         DateTime
  endDate           DateTime
  currency          String           @default("EUR")
  status            BudgetStatus     @default(DRAFT)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdBy         String
  
  partners          BudgetPartner[]
  categories        BudgetCategory[]
  items             BudgetItem[]
  imports           BudgetImportHistory[]
  
  @@map("budgets")
}

// Budget Partner model - partneri v rozpočte
model BudgetPartner {
  id          String  @id @default(cuid())
  budgetId    String
  budget      Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  partnerName String
  allocation  Decimal @db.Decimal(15,2)
  
  items       BudgetItem[]
  
  @@map("budget_partners")
}

// Budget Category model - kategórie rozpočtu
model BudgetCategory {
  id          String  @id @default(cuid())
  budgetId    String
  budget      Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  name        String
  code        String
  maxLimit    Decimal? @db.Decimal(5,2) // percentuálny limit
  
  items       BudgetItem[]
  
  @@map("budget_categories")
}

// Budget Item model - rozpočtové položky
model BudgetItem {
  id              String          @id @default(cuid())
  budgetId        String
  budget          Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  partnerId       String?
  partner         BudgetPartner?  @relation(fields: [partnerId], references: [id])
  categoryId      String
  category        BudgetCategory  @relation(fields: [categoryId], references: [id])
  
  // Základné informácie z Excel
  itemNumber      String          // P.č. z Excel (1, 2, 4.2.1, atď.)
  name            String          // Rozpočtové položky
  projectActivity String?         // Project activity kód
  activityDescription String?     // Aktivity projektu (slovenský popis)
  unit            String?         // Unit (jednotka merania)
  quantity        Decimal?        @db.Decimal(10,2) // Počet
  unitPrice       Decimal?        @db.Decimal(15,2) // Jednotková cena v EUR
  totalPrice      Decimal         @db.Decimal(15,2) // Celková cena v EUR
  description     String?         @db.Text // Popis
  detail          String?         @db.Text // Detail
  finalPrice      Decimal?        @db.Decimal(15,2) // Cena v EUR finálna
  period24Months  Decimal?        @db.Decimal(15,2) // Obdobie 24 mes.
  notes           String?         @db.Text // Poznámka
  
  // Sledovanie čerpania
  plannedAmount   Decimal         @db.Decimal(15,2) // = totalPrice
  spentAmount     Decimal         @default(0) @db.Decimal(15,2)
  workPackage     String?
  period          String?         // Q1-2025, Q2-2025, atď.
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  expenses        Expense[]
  tasks           Task[]          // prepojenie s úlohami
  
  @@map("budget_items")
}

// Responsible Person model - zodpovedné osoby z Excel
model ResponsiblePerson {
  id              String    @id @default(cuid())
  orderNumber     Int       // P.č.
  role            String    // Role (pozícia)
  isInternal      Boolean   @default(true) // Interný (s odôvodnením)
  internalReason  String?   @db.Text // Odôvodnenie prečo interný
  responsibilities String   @db.Text // Náplň činností (popis úloh)
  competencies    String    @db.Text // Požadované kompetencie/skúsenosti
  relatedActivities String? @db.Text // Súvisiace aktivity projektu
  personName      String?   // Zodpovedná osoba (meno)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("responsible_persons")
}

// Expense model - výdavky
model Expense {
  id              String            @id @default(cuid())
  budgetItemId    String
  budgetItem      BudgetItem        @relation(fields: [budgetItemId], references: [id])
  
  amount          Decimal           @db.Decimal(15,2)
  date            DateTime
  description     String
  supplierName    String?
  supplierIco     String?
  invoiceNumber   String?
  
  status          ExpenseStatus     @default(PENDING)
  createdBy       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  documents       ExpenseDocument[]
  approvals       ExpenseApproval[]
  
  @@map("expenses")
}

// Expense Document model - doklady k výdavkom
model ExpenseDocument {
  id              String    @id @default(cuid())
  expenseId       String
  expense         Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  filename        String
  originalName    String
  mimeType        String
  size            Int
  url             String
  
  // OCR rozpoznané údaje
  ocrAmount       Decimal?  @db.Decimal(15,2)
  ocrDate         DateTime?
  ocrInvoiceNumber String?
  ocrSupplier     String?
  
  uploadedAt      DateTime  @default(now())
  uploadedBy      String
  
  @@map("expense_documents")
}

// Expense Approval model - schvaľovanie výdavkov
model ExpenseApproval {
  id              String        @id @default(cuid())
  expenseId       String
  expense         Expense       @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  approverLevel   Int           // 1=Partner, 2=Financial, 3=Project Manager
  approverId      String
  approver        User          @relation(fields: [approverId], references: [id])
  
  status          ApprovalStatus
  comment         String?
  approvedAt      DateTime?
  
  createdAt       DateTime      @default(now())
  
  @@map("expense_approvals")
}

// Budget Import History model - história importov
model BudgetImportHistory {
  id              String    @id @default(cuid())
  budgetId        String
  budget          Budget    @relation(fields: [budgetId], references: [id])
  
  filename        String
  importedBy      String
  itemsCount      Int
  totalAmount     Decimal   @db.Decimal(15,2)
  status          ImportStatus
  errorMessage    String?
  
  importedAt      DateTime  @default(now())
  
  @@map("budget_import_history")
}

// ===== ENUMS =====

// Enums for Project Tasks
enum TaskPriority {
  VYSOKA    // Vysoká
  STREDNA   // Stredná
  NIZKA     // Nízka
}

enum TaskRecurrence {
  PRIEBEZNE           // Priebežne
  DVAKRAT_MESACNE     // 2x mesačne
  KVARTALNE           // 1x kvartálne
  JEDNORAZOVO         // Jednorazovo
  PODLA_POTREBY       // Podľa potreby
  PERIODICKY          // Periodicky (podľa harmonogramu)
  POCAS_STAVBY        // Počas stavebných prác
  PO_UKONCENI         // Po ukončení prác
}

enum SubtaskStatus {
  PENDING     // Čakajúca
  IN_PROGRESS // V procese
  COMPLETED   // Dokončená
  OVERDUE     // Po termíne
}

// Enums pre rozpočtový modul
enum BudgetStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ImportStatus {
  SUCCESS
  FAILED
  PARTIAL
}

// Rozšírenie ActivityType enum
enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  COMMENT_ADDED
  DOCUMENT_UPLOADED
  COMPLIANCE_CHECK
  STATUS_CHANGED
  BUDGET_CREATED
  BUDGET_IMPORTED
  EXPENSE_ADDED
  EXPENSE_APPROVED
  EXPENSE_REJECTED
}

