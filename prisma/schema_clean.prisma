// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  role          String    @default("TEAM_MEMBER") // ADMIN, PROJECT_MANAGER, TEAM_MEMBER, STAKEHOLDER, GUEST
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  assignedTasks      Task[]
  activities         Activity[]
  complianceChecks   ComplianceCheck[]
  documents          Document[]
}

// Task model
model Task {
  id          String    @id @default(uuid())
  externalId  String    @unique // e.g., TASK-2024-07-0001
  title       String
  description String?
  status      String    @default("TODO") // TODO, IN_PROGRESS, DONE, BLOCKED, PENDING, COMPLETED, CANCELLED
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT, CRITICAL
  category    String    // GENERAL, REPORTING, FINANCIAL, PROCUREMENT, COMPLIANCE, PUBLICITY, PARTNERSHIP, MONITORING
  progress    Int       @default(0)
  deadline    DateTime?
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  assignee    User?     @relation(fields: [assigneeId], references: [id])
  activities  Activity[]
}

// Activity model
model Activity {
  id          String    @id @default(uuid())
  type        String    // TASK_CREATED, TASK_UPDATED, TASK_COMPLETED, TASK_ASSIGNED, COMMENT_ADDED, DOCUMENT_UPLOADED, COMPLIANCE_CHECK, STATUS_CHANGED
  description String
  userId      String
  taskId      String?
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  task        Task?     @relation(fields: [taskId], references: [id])
}

// Compliance Check model
model ComplianceCheck {
  id          String    @id @default(uuid())
  title       String
  description String?
  type        String    // VISUAL_IDENTITY, SANCTIONS_LIST, GDPR, PROCUREMENT, FINANCIAL, REPORTING
  status      String    @default("PENDING") // COMPLIANT, NON_COMPLIANT, PENDING
  dueDate     DateTime?
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  assignee    User?     @relation(fields: [assigneeId], references: [id])
}

// Document model
model Document {
  id          String    @id @default(uuid())
  title       String
  description String?
  type        String    // REPORT, FINANCIAL, CONTRACT, PRESENTATION, OTHER
  url         String
  uploaderId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  uploader    User      @relation(fields: [uploaderId], references: [id])
}

// Project Document model - for documents from CSV
model ProjectDocument {
  id              String    @id @default(uuid())
  internalNumber  Int       @unique // Interné P.č.
  originalName    String    // Názov dokumentu (originálny)
  taskType        String    // Typ úlohy (hlavná kategória)
  isDirectSource  Boolean   @default(false) // Priamy zdroj pre úlohu v Projektove_ulohy.csv?
  notes           String?   // Poznámky (Duplicita/Kontext)
  filePath        String?   // Cesta k súboru
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  projectTasks    ProjectTask[]
}

// Project Task model - for tasks from CSV with hierarchical structure
model ProjectTask {
  id                    String    @id @default(uuid())
  taskNumber            String    @unique // P.č. (napr. "1", "1.1", "1.1.1")
  parentId              String?   // Pre hierarchickú štruktúru
  parent                ProjectTask? @relation("TaskHierarchy", fields: [parentId], references: [id])
  children              ProjectTask[] @relation("TaskHierarchy")
  
  taskType              String    // Typ úlohy
  title                 String    // Názov úlohy
  description           String    @db.Text // Detailný popis
  source                String    // Zdroj (dokument, strana)
  priority              TaskPriority // Priorita (enum)
  recurrence            TaskRecurrence // Opakovanie (enum)
  startDate             DateTime? // Začiatok
  endDate               DateTime? // Ukončenie
  duration              String?   // Trvanie
  responsiblePerson     String?   // Zodpovedná osoba
  expectedResult        String?   @db.Text // Očakávaný výsledok
  fulfillsKC            Boolean   @default(false) // Plní KC?
  notes                 String?   @db.Text // Poznámky
  
  // Relations
  documentId            String?
  document              ProjectDocument? @relation(fields: [documentId], references: [id])
  subtasks              ProjectSubtask[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([taskNumber])
  @@index([taskType])
  @@index([recurrence])
}

// Project Subtask model - for automatically generated subtasks with due dates
model ProjectSubtask {
  id                String    @id @default(uuid())
  projectTaskId     String
  projectTask       ProjectTask @relation(fields: [projectTaskId], references: [id], onDelete: Cascade)
  
  title             String    // Názov podúlohy
  description       String?   @db.Text // Popis podúlohy
  dueDate           DateTime  // Termín realizácie
  status            SubtaskStatus @default(PENDING) // Stav podúlohy
  notes             String?   @db.Text // Poznámky
  completedAt       DateTime? // Dátum dokončenia
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([projectTaskId, dueDate])
  @@index([status])
  @@index([dueDate])
}

// Enums for Project Tasks
enum TaskPriority {
  VYSOKA    // Vysoká
  STREDNA   // Stredná
  NIZKA     // Nízka
}

enum TaskRecurrence {
  PRIEBEZNE           // Priebežne
  DVAKRAT_MESACNE     // 2x mesačne
  KVARTALNE           // 1x kvartálne
  JEDNORAZOVO         // Jednorazovo
  PODLA_POTREBY       // Podľa potreby
  PERIODICKY          // Periodicky (podľa harmonogramu)
  POCAS_STAVBY        // Počas stavebných prác
  PO_UKONCENI         // Po ukončení prác
}

enum SubtaskStatus {
  PENDING     // Čakajúca
  IN_PROGRESS // V procese
  COMPLETED   // Dokončená
  OVERDUE     // Po termíne
}

