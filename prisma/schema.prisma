// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  role          String    @default("TEAM_MEMBER") // ADMIN, PROJECT_MANAGER, TEAM_MEMBER, STAKEHOLDER, GUEST
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  assignedTasks      Task[]
  activities         Activity[]
  complianceChecks   ComplianceCheck[]
  documents          Document[]
}

// Task model
model Task {
  id          String    @id @default(uuid())
  externalId  String    @unique // e.g., TASK-2024-07-0001
  title       String
  description String?
  status      String    @default("TODO") // TODO, IN_PROGRESS, DONE, BLOCKED, PENDING, COMPLETED, CANCELLED
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT, CRITICAL
  category    String    // GENERAL, REPORTING, FINANCIAL, PROCUREMENT, COMPLIANCE, PUBLICITY, PARTNERSHIP, MONITORING
  progress    Int       @default(0)
  deadline    DateTime?
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  assignee    User?     @relation(fields: [assigneeId], references: [id])
  activities  Activity[]
}

// Activity model
model Activity {
  id          String    @id @default(uuid())
  type        String    // TASK_CREATED, TASK_UPDATED, TASK_COMPLETED, TASK_ASSIGNED, COMMENT_ADDED, DOCUMENT_UPLOADED, COMPLIANCE_CHECK, STATUS_CHANGED
  description String
  userId      String
  taskId      String?
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  task        Task?     @relation(fields: [taskId], references: [id])
}

// Compliance Check model
model ComplianceCheck {
  id          String    @id @default(uuid())
  title       String
  description String?
  type        String    // VISUAL_IDENTITY, SANCTIONS_LIST, GDPR, PROCUREMENT, FINANCIAL, REPORTING
  status      String    @default("PENDING") // COMPLIANT, NON_COMPLIANT, PENDING
  dueDate     DateTime?
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  assignee    User?     @relation(fields: [assigneeId], references: [id])
}

// Document model
model Document {
  id          String    @id @default(uuid())
  title       String
  description String?
  type        String    // REPORT, FINANCIAL, CONTRACT, PRESENTATION, OTHER
  url         String
  uploaderId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  uploader    User      @relation(fields: [uploaderId], references: [id])
}

