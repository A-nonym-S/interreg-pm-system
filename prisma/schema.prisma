// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(USER)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedTasks Task[]
  activities    Activity[]
  comments      Comment[]

  @@map("users")
}

enum UserRole {
  ADMIN
  PROJECT_MANAGER
  USER
  VIEWER
}

// Task Management
model Task {
  id          String     @id @default(cuid())
  externalId  String?    @unique // TASK-2025-01-0001
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  category    TaskCategory
  
  // Dates
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deadline  DateTime?
  startDate DateTime?
  
  // Relations
  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id])
  
  // Task hierarchy
  parentId String?
  parent   Task?   @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks Task[]  @relation("TaskHierarchy")
  
  // Additional data
  progress    Int      @default(0) // 0-100
  estimatedHours Int?
  actualHours    Int?
  
  // Relations
  activities Activity[]
  comments   Comment[]
  documents  Document[]
  compliance ComplianceCheck[]

  @@map("tasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  BLOCKED
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskCategory {
  PUBLICITA
  FINANCIE
  REPORTING
  COMPLIANCE
  MONITORING
  OBSTARAVANIE
  PARTNERSTVO
  GENERAL
}

// Activity Tracking
model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?        // Additional data as JSON
  createdAt   DateTime     @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  @@map("activities")
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  COMMENT_ADDED
  DOCUMENT_UPLOADED
  COMPLIANCE_CHECK
  STATUS_CHANGED
}

// Comments
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  @@map("comments")
}

// Document Management
model Document {
  id          String       @id @default(cuid())
  name        String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  category    DocumentCategory
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  @@map("documents")
}

enum DocumentCategory {
  REPORT
  CONTRACT
  INVOICE
  PRESENTATION
  IMAGE
  OTHER
}

// INTERREG Compliance
model ComplianceCheck {
  id          String            @id @default(cuid())
  category    ComplianceCategory
  status      ComplianceStatus
  description String?
  details     Json?             // Additional compliance data
  nextCheck   DateTime?
  lastCheck   DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  @@map("compliance_checks")
}

enum ComplianceCategory {
  VISUAL_IDENTITY
  SANCTIONS_CHECK
  GDPR
  REPORTING
  FINANCIAL
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  PENDING_REVIEW
  NEEDS_ACTION
}

// Project Settings
model ProjectSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project_settings")
}

